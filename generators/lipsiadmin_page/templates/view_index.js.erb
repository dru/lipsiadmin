var selections = new Ext.grid.CheckboxSelectionModel();
var proxy = new Ext.ux.data.PagingMemoryProxy();

var items = [
	<%= model_instance.class.content_columns.collect{ |column| "{ name: '#{column.name}' }" }.join(",\n") %>
]

var ds = new Ext.data.Store({
	proxy: new Ext.data.HttpProxy({url: '/admin/<%= plural_name %>.json', method: 'GET'}),
	reader: new Ext.data.JsonReader({
        root: '<%= plural_name %>',
        totalProperty: 'total',
        id: 'id'
    },items),
    // turn on remote sorting
	remoteSort: true
});


	
//Uncomment this whit your default sort
//ds.setDefaultSort('created_at', 'desc');

var grid = new Ext.grid.GridPanel({
	store: ds,
	viewConfig: { forceFit: true },
	clicksToEdit: 'auto',
	enableColumnHide:false,
	enableColumnMove:false,
	border:false,
	bodyBorder:false,
	cls:'grid',
	title: Lipsiadmin.locale.labels.all + '<%= plural_name.humanize %>',
	iconCls:'icon-show-all',
	region:'center',
	sm: selections,
	columns: [
		selections,
		<%= model_instance.class.content_columns.collect{ |column| "{
				header: '#{column.human_name}',
				sortable: true,
				dataIndex: '#{column.name}' 
			}" }.join(",") %>   
	],
	tbar: [
		{
			id:'add',
			text: Lipsiadmin.locale.buttons.add,
			disabled:false,
			cls: 'x-btn-text-icon add',
			handler:add
		},'-',{
			id:'edit',
			text: Lipsiadmin.locale.buttons.edit,
			disabled:true,
			cls: 'x-btn-text-icon edit',
			handler:edit
		},'-',{
			id:'remove',
			text: Lipsiadmin.locale.buttons.remove,
			disabled:true,
			cls:'x-btn-text-icon remove',
			handler:remove
		},'->',
			 Lipsiadmin.locale.labels.search, ' ',
			 new Ext.app.SearchField({
				pageSize: 50,
				store: ds,
				items: items,
				width:320
			 })
	],
	bbar: new Ext.PagingToolbar({
		pageSize: 50,
		store: ds,
		displayInfo: true
	})
});

selections.on('selectionchange', function(){
	var n = selections.getSelected();
	var btns = grid.getTopToolbar().items.map;

   if(!n){
   	btns.remove.disable();
		btns.edit.disable();
     return;
	} else {
		btns.remove.enable();
		btns.edit.enable();
		return;
   }
});

grid.getBottomToolbar().on('render', function(){ 	grid.getBottomToolbar().loading.hide(); });

function add(){
	Lipsiadmin.app.loadMenu('/admin/<%= plural_name %>/new');
}

function edit(){
	Lipsiadmin.app.loadMenu('/admin/<%= plural_name %>/'+selections.getSelected().id+'/edit');
}

function remove(){
	Ext.Msg.confirm(Lipsiadmin.locale.confirm.title, Lipsiadmin.locale.confirm.msg_1 + selections.getCount() + Lipsiadmin.locale.confirm.msg_2, function(btn, text){
		if (btn == 'yes'){
			selections.each(function(r){
				Lipsiadmin.app.mask();
				Ext.Ajax.request({
					url: '/admin/<%= plural_name %>/'+r.id,
					method: 'DELETE',
					params: { <%%= request_forgery_protection_token %>: '<%%= form_authenticity_token %>' },
					success: function(result, request){
						Lipsiadmin.app.unmask();
						var resultValue = Ext.decode(result.responseText); 
						if (resultValue.success == true){
							ds.remove(r);
						} else { 
				    	Ext.MessageBox.alert(Lipsiadmin.locale.alert.title, resultValue.msg);
							return;
						}
					},								
					failure: function(result, request) {
						Lipsiadmin.app.unmask();
						Ext.Msg.alert(Lipsiadmin.locale.alert.title, Lipsiadmin.locale.alert.msg);
					}
				});
			})
		}
	});
}

function loadData(){ 
	Lipsiadmin.app.unmask();
}

ds.on('load', loadData);
Lipsiadmin.app.addItem(grid);
Lipsiadmin.app.mask();
ds.load();